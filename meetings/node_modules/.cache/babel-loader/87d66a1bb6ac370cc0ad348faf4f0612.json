{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sangchulkim/Desktop/SW_Practice/HW2/meetings/meetings/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getAllMeetings),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addMeeting),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(deleteMeeting),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, put, select, takeEvery, takeLatest } from 'redux-saga/effects';\nimport actions from './actions';\nimport * as constants from './constants';\n\nfunction getAllMeetings() {\n  var meetingsData, option, response;\n  return _regeneratorRuntime.wrap(function getAllMeetings$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          option = {\n            method: 'GET',\n            headers: new Headers({\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }),\n            mode: 'cors'\n          };\n          _context.prev = 1;\n          _context.next = 4;\n          return call(fetch, 'http://127.0.0.1:8000/meetings/', option);\n\n        case 4:\n          response = _context.sent;\n\n          if (response.ok) {\n            _context.next = 7;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 7:\n          _context.next = 9;\n          return response.json();\n\n        case 9:\n          meetingsData = _context.sent;\n          _context.next = 16;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](1);\n          alert('fetch failed: ' + _context.t0);\n          return _context.abrupt(\"return\");\n\n        case 16:\n          _context.next = 18;\n          return put(actions.refreshMeetings(meetingsData));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 12]]);\n}\n\nfunction addMeeting(action) {\n  var state, option, response;\n  return _regeneratorRuntime.wrap(function addMeeting$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return select();\n\n        case 2:\n          state = _context2.sent;\n          option = {\n            method: 'POST',\n            withCredentials: true,\n            //define headers\n            headers: new Headers({\n              'Authorization': \"Token \".concat(state.auth.token),\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }),\n            mode: 'cors'\n          };\n          option.body = JSON.stringify(action.meeting);\n          _context2.prev = 5;\n          _context2.next = 8;\n          return call(fetch, 'http://127.0.0.1:8000/meetings/', option);\n\n        case 8:\n          response = _context2.sent;\n\n          if (response.ok) {\n            _context2.next = 11;\n            break;\n          }\n\n          return _context2.abrupt(\"return\");\n\n        case 11:\n          _context2.next = 17;\n          break;\n\n        case 13:\n          _context2.prev = 13;\n          _context2.t0 = _context2[\"catch\"](5);\n          alert('post failed ' + _context2.t0);\n          return _context2.abrupt(\"return\");\n\n        case 17:\n          _context2.next = 19;\n          return call(getAllMeetings);\n\n        case 19:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[5, 13]]);\n}\n\nfunction deleteMeeting(action) {\n  var state, option, response;\n  return _regeneratorRuntime.wrap(function deleteMeeting$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return select();\n\n        case 2:\n          state = _context3.sent;\n          option = {\n            method: 'DELETE',\n            withCredentials: true,\n            headers: new Headers({\n              'Authorization': \"Token \".concat(state.auth.token),\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }),\n            mode: 'cors'\n          };\n          _context3.prev = 4;\n          _context3.next = 7;\n          return call(fetch, \"http://127.0.0.1:8000/meetings/\".concat(action.id, \"/\"), option);\n\n        case 7:\n          response = _context3.sent;\n\n          if (response.ok) {\n            _context3.next = 11;\n            break;\n          }\n\n          alert('delete failed! it is not your reservation');\n          return _context3.abrupt(\"return\");\n\n        case 11:\n          _context3.next = 17;\n          break;\n\n        case 13:\n          _context3.prev = 13;\n          _context3.t0 = _context3[\"catch\"](4);\n          alert('delete failed ' + _context3.t0);\n          return _context3.abrupt(\"return\");\n\n        case 17:\n          _context3.next = 19;\n          return call(getAllMeetings);\n\n        case 19:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[4, 13]]);\n} //login function\n\n\nfunction login(action) {\n  var userInfo, option, response;\n  return _regeneratorRuntime.wrap(function login$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          option = {\n            method: 'POST',\n            headers: new Headers({\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }),\n            mode: 'cors'\n          };\n          option.body = JSON.stringify(action.user);\n          _context4.prev = 2;\n          _context4.next = 5;\n          return call(fetch, 'http://127.0.0.1:8000/api-token-auth/', option);\n\n        case 5:\n          response = _context4.sent;\n\n          if (response.ok) {\n            _context4.next = 9;\n            break;\n          }\n\n          alert('login failed!');\n          return _context4.abrupt(\"return\");\n\n        case 9:\n          _context4.next = 11;\n          return response.json();\n\n        case 11:\n          userInfo = _context4.sent;\n          _context4.next = 18;\n          break;\n\n        case 14:\n          _context4.prev = 14;\n          _context4.t0 = _context4[\"catch\"](2);\n          alert('login failed ' + _context4.t0);\n          return _context4.abrupt(\"return\");\n\n        case 18:\n          userInfo.username = action.user.username;\n          _context4.next = 21;\n          return put(actions.loginSuccess(userInfo));\n\n        case 21:\n          _context4.next = 23;\n          return call(getAllMeetings);\n\n        case 23:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[2, 14]]);\n}\n\nexport default function rootSaga(api) {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([takeLatest(constants.GET_ALL_MEETING, getAllMeetings), takeEvery(constants.ADD_MEETING, addMeeting), takeEvery(constants.DELETE_MEETING, deleteMeeting), takeLatest(constants.LOGIN, login)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/sangchulkim/Desktop/SW_Practice/HW2/meetings/meetings/src/store/sagas.js"],"names":["getAllMeetings","addMeeting","deleteMeeting","login","rootSaga","all","call","put","select","takeEvery","takeLatest","actions","constants","option","method","headers","Headers","mode","fetch","response","ok","json","meetingsData","alert","refreshMeetings","action","state","withCredentials","auth","token","body","JSON","stringify","meeting","id","user","userInfo","username","loginSuccess","api","GET_ALL_MEETING","ADD_MEETING","DELETE_MEETING","LOGIN"],"mappings":"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","sourcesContent":["import {all,call,put,select,takeEvery,takeLatest,} from 'redux-saga/effects';\nimport actions from './actions';\nimport * as constants from './constants';\n\nfunction* getAllMeetings() {\n    let meetingsData;\n    const option = {\n        method: 'GET',\n        headers: new Headers({\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n        }),\n        mode: 'cors',\n    };\n    try {\n        const response = yield call(fetch, 'http://127.0.0.1:8000/meetings/', option);\n        if (!response.ok) {\n            return;\n        }\n        meetingsData = yield response.json();\n    } catch (error) {\n        alert('fetch failed: ' + error);\n        return;\n    }\n    yield put(actions.refreshMeetings(meetingsData));\n}\n\nfunction* addMeeting(action) {\n    const state = yield select();\n    const option = {\n        method: 'POST',\n        withCredentials: true,\n        //define headers\n        headers: new Headers({\n            'Authorization': `Token ${state.auth.token}`,\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n        }),\n        mode: 'cors',\n    };\n    option.body = JSON.stringify(action.meeting);\n    try {\n        const response = yield call(fetch, 'http://127.0.0.1:8000/meetings/', option);\n        if (!response.ok) {\n            return;\n        }\n    } catch (error) {\n        alert('post failed ' + error);\n        return;\n    }\n    yield call(getAllMeetings);\n}\n\nfunction* deleteMeeting(action) {\n    const state = yield select();\n    const option = {\n        method: 'DELETE',\n        withCredentials: true,\n        headers: new Headers({\n            'Authorization': `Token ${state.auth.token}`,\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n        }),\n        mode: 'cors',\n    };\n    try {\n        const response = yield call(fetch, `http://127.0.0.1:8000/meetings/${action.id}/`, option);\n        if (!response.ok) {\n            alert('delete failed! it is not your reservation');\n            return;\n        }\n    } catch (error) {\n        alert('delete failed ' + error);\n        return;\n    }\n    yield call(getAllMeetings);\n}\n\n//login function\nfunction* login(action) {\n    let userInfo;\n    const option = {\n        method: 'POST',\n        headers: new Headers({\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n        }),\n        mode: 'cors',\n    };\n    option.body = JSON.stringify(action.user);\n    try {\n        const response = yield call(fetch, 'http://127.0.0.1:8000/api-token-auth/', option);\n        if (!response.ok) {\n            alert('login failed!');\n            return;\n        }\n        userInfo = yield response.json();\n    } catch (error) {\n        alert('login failed ' + error);\n        return;\n    }\n    userInfo.username = action.user.username;\n    yield put(actions.loginSuccess(userInfo));\n    yield call(getAllMeetings);\n}\n\nexport default function* rootSaga(api) {\n    yield all([\n        takeLatest(constants.GET_ALL_MEETING, getAllMeetings),\n        takeEvery(constants.ADD_MEETING, addMeeting),\n        takeEvery(constants.DELETE_MEETING, deleteMeeting),\n        takeLatest(constants.LOGIN, login),\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}